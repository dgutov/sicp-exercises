;; Ex. 3.47a
(define (make-semaphore n)
  (let ((mutex (make-mutex))
        (count 0))
    (define (me m)
      (cond ((eq? m 'acquire)
             (mutex 'acquire)
             (if (< count n)
                 (begin
                   (set! count (1+ count))
                   (mutex 'release))
                 (begin
                   (mutex 'release)
                   (me 'acquire))))
            ((eq? m 'release)
             (mutex 'acquire)
             (if (> count 0)
                 (set! count (1- count)))
             (mutex 'release))))
    me))

;; Ex. 3.47b
(define (make-semaphore n)
  (let ((lock (list #f))
        (count 0))
    (define (acquire-lock)
      (if (test-and-set! lock)
          (acquire-lock)))
    (define (release-lock)
      (set-car! lock #f))
    (define (me m)
      (cond ((eq? m 'acquire)
             (acquire-lock)
             (if (< count n)
                 (begin
                   (set! count (1+ count))
                   (release-lock))
                 (begin
                   (release-lock)
                   (me 'acquire))))
            ((eq? m 'release)
             (acquire-lock)
             (if (> count 0)
                 (set! count (1- count))
                 (release-lock)))))
    me))

;; Ex. 3.48
(define make-account-and-serializer
  (let ((account-count 0)
        (account-mutex (make-mutex)))
    (lambda (balance)
      (let ((number #f))
        (account-mutex 'acquire)
        (set! number (1+ account-count))
        (set! account-count number)
        (account-mutex 'release)
        (define (withdraw amount)
          (if (>= balance amount)
              (begin (set! balance (- balance amount))
                     balance)
              "Insufficient funds"))
        (define (deposit amount)
          (set! balance (+ balance amount))
          balance)
        (let ((balance-serializer (make-serializer)))
          (define (dispatch m)
            (cond ((eq? m 'withdraw) withdraw)
                  ((eq? m 'deposit) deposit)
                  ((eq? m 'balance) balance)
                  ((eq? m 'number) number)
                  ((eq? m 'serializer) balance-serializer)
                  (else (error "Unknown request -- MAKE-ACCOUNT"
                               m))))
          dispatch)))))

(define (serialized-exchange account1 account2)
  (let ((serializer1 (account1 'serializer))
        (serializer2 (account2 'serializer)))
    ((if (> (account2 'number) (account1 'number))
         (serializer1 (serializer2 exchange))
         (serializer2 (serializer1 exchange)))
     account1 account 2)))
